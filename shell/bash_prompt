#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

enable_color_support() {

    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] \
        && infocmp gnome-256color &> /dev/null; then
        export TERM="gnome-256color"
    elif infocmp xterm-256color &> /dev/null; then
        export TERM="xterm-256color"
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Load specific color support.

    . bash_colors

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# [!] Don't break this function into smaller, more specialized ones
# as you will only pollute the global space even more. This function
# cannot be unset because it's called every time the prompt string
# is shown.

get_git_repository_details() {

    local branchName=""
    local tmp=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the current directory is in a Git repository.

    ! git rev-parse &>/dev/null \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory).

    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for uncommitted changes in the index.

    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for unstaged changes.

    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for untracked files.

    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for stashed files.

    if git rev-parse --verify refs/stash &>/dev/null; then
        tmp="$tmp$";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    [ -n "$tmp" ] \
        && tmp=" [$tmp]"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    branchName="$( printf "%s" "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | \
        tr -d "\n" )"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    printf "%s" "$1$branchName$tmp"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set_prompts() {

    local bold=$(tput bold 2> /dev/null)
    local reset=$(tput sgr0 2> /dev/null)

    local cyan=""
    local green=""
    local orange=""
    local white=""
    local yellow=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if [ "$(tput colors 2> /dev/null || printf "0")" -ge 256 ]; then

        # Solarized colors.
        # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values

        base03=$(tput setaf 234)     #1c1c1c
        base02=$(tput setaf 235)     #262626
        base01=$(tput setaf 240)     #585858
        base00=$(tput setaf 241)     #626262
        base0=$(tput setaf 244)      #808080
        base1=$(tput setaf 245)      #8a8a8a
        base2=$(tput setaf 254)      #e4e4e4
        base3=$(tput setaf 230)      #ffffd7
        yellow=$(tput setaf 136)     #af8700
        orange=$(tput setaf 166)     #d75f00
        red=$(tput setaf 124)        #af0000
        magenta=$(tput setaf 125)    #af005f
        violet=$(tput setaf 61)      #5f5faf
        blue=$(tput setaf 33)        #0087ff
        cyan=$(tput setaf 37)        #00afaf
        green=$(tput setaf 64)       #5f8700

        neutral=$base1
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Prompt Statement variables.
    # http://ss64.com/bash/syntax-prompt.html

    # ------------------------------------------------------------------
    # | PS1 - Default interactive prompt                               |
    # ------------------------------------------------------------------

    PS1="\[\033]0;\W\007\]" # Terminal title (set to the
                            # current working directory)

    PS1+="$reset$bold"
    PS1+="$orange\u"        # Username
    PS1+="$neutral@"
    PS1+="$yellow\h"        # Host
    PS1+="$neutral: "
    PS1+="$green\w"         # Working directory
    PS1+="\$(get_git_repository_details \"$neutral on $cyan\")"
    PS1+="\n"
    PS1+="\[$reset\]\[$neutral\]$ \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | PS2 - Continuation interactive prompt                          |
    # ------------------------------------------------------------------

    PS2="⚡ "

    export PS2

    # ------------------------------------------------------------------
    # | PS4 - Debug prompt                                             |
    # ------------------------------------------------------------------

    # e.g:
    #
    # The GNU `date` command has the `%N` interpreted sequence while
    # other implementations don't (on macOS `gdate` can be used instead
    # of the native `date` if the `coreutils` package has been installed).
    #
    # local dateCmd=""
    #
    # if [ "$(date +%N)" != "N" ] || \
    #    [ ! -x "$(command -v "gdate")" ]; then
    #    dateCmd="date +%s.%N"
    # else
    #    dateCmd="gdate +%s.%N"
    # fi
    #
    # PS4="+$( tput cr && tput cuf 6 &&
    #          printf "$yellow %s $green%6s $reset" "$($dateCmd)" "[$LINENO]" )"
    #
    # PS4 output:
    #
    #   ++    1357074705.875970000  [123] '[' 1 == 0 ']'
    #   └──┬─┘└────┬───┘ └───┬───┘ └──┬─┘ └──────┬─────┘
    #      │       │         │        │          │
    #      │       │         │        │          └─ command
    #      │       │         │        └─ line number
    #      │       │         └─ nanoseconds
    #      │       └─ seconds since 1970-01-01 00:00:00 UTC
    #      └─ depth-level of the subshell

    PS4="+$( tput cr 2> /dev/null;
             tput cuf 6 2> /dev/null;
             printf "%s" "$reset" )"

    export PS4

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
    enable_color_support
    set_prompts
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Cleanup.

unset -f enable_color_support
unset -f main
unset -f set_prompts
